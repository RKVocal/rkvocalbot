from flask import Flask
import os
import asyncio
from threading import Thread

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get("TELEGRAM_TOKEN")
CHANNEL_ID = -1002673799333

WELCOME_MESSAGE = """
üé§ *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!* –Ø –ø–æ–º–æ—â–Ω–∏–∫ *RKVocal*.

üéß –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ *–ø—Ä–∏–º–µ—Ä —Å–≤–æ–µ–≥–æ –≤–æ–∫–∞–ª–∞* ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å *–∞—É–¥–∏–æ* –∏–ª–∏ *–≤–∏–¥–µ–æ* —Ñ–∞–π–ª.

üì© –ñ–¥—É –≤–∞—à –º–∞—Ç–µ—Ä–∏–∞–ª!
"""

THANK_YOU_MESSAGE = """
‚úÖ *–°–ø–∞—Å–∏–±–æ!*

üí° –í–æ–∑–º–æ–∂–Ω–æ, *–∏–º–µ–Ω–Ω–æ –≤–∞—à –≤–æ–∫–∞–ª* –±—É–¥–µ—Ç —Ä–∞–∑–æ–±—Ä–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∏–¥–µ–æ *RKVocal*. üé¨
"""

keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üé• YouTube", url="https://www.youtube.com/@rkvocal")],
    [InlineKeyboardButton("‚úàÔ∏è Telegram", url="https://t.me/rk_vocal")]
])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_MESSAGE, parse_mode="Markdown")

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(THANK_YOU_MESSAGE, parse_mode="Markdown", reply_markup=keyboard)
    await update.message.forward(chat_id=CHANNEL_ID)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ö†Ô∏è –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç *—Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã*.",
        parse_mode="Markdown"
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    print(f'–û—à–∏–±–∫–∞: {context.error}')

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç RKVocal —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

async def run_bot():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(
        filters.AUDIO | filters.VIDEO | filters.VOICE | filters.Document.ALL,
        handle_media
    ))
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_text
    ))
    application.add_error_handler(error_handler)

    # –í—Ä—É—á–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–±–µ–∑ .run_polling())
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

if __name__ == '__main__':
    if not TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Secrets!")
    else:
        # Flask –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        Thread(target=run_flask).start()

        # –ë–æ—Ç ‚Äî –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ
        try:
            loop = asyncio.get_event_loop()
            loop.create_task(run_bot())
            loop.run_forever()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
